//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// vovkor
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNet.Identity;

namespace virdbApp2.Models
{
    using System;
    using System.Collections.Generic;

    public partial class maindb
    {
        public int id { get; set; }

        [Required(ErrorMessageResourceType = typeof(Resources.Resource), ErrorMessageResourceName = "AccenumbRequired")]
        [Display(Name = "accenumb", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Accession number"), Required(ErrorMessage = "You have to fill the Accession number field")]
        public string accenumb { get; set; }

        [Display(Name = "CollectingNumber", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Collecting number")]
        public string collnumb { get; set; }

        [Required(ErrorMessageResourceType = typeof(Resources.Resource), ErrorMessageResourceName = "TaxonomyRequired")]
        [Display(Name = "Taxonomy", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Taxonomy"), Required(ErrorMessage = "You have to fill the Taxonomy field")]
        public Nullable<int> botanic_code { get; set; }

        [Required(ErrorMessageResourceType = typeof(Resources.Resource), ErrorMessageResourceName = "NameEngRequired")]
        [Display(Name = "NameEng", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Plant name (lat)"), Required(ErrorMessage = "You have to fill the 'Plant name (lat)' field")]
        public string accename_eng { get; set; }

        [Required(ErrorMessageResourceType = typeof(Resources.Resource), ErrorMessageResourceName = "NameRusRequired")]
        [Display(Name = "NameRus", ResourceType = typeof(Resources.Resource))]        
        //[Display(Name = "Plant name (rus)"), Required(ErrorMessage = "You have to fill the 'Plant name (rus)' field")]
        public string accename_rus { get; set; } // Name (RUS)

        //[DisplayFormat(DataFormatString = "{0:dd'/'MM'/'yyyy}", ApplyFormatInEditMode = true), Required(ErrorMessage = "You have to fill the Acquisition date field")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd'/'MM'/'yyyy}", ApplyFormatInEditMode = true),Required(ErrorMessageResourceType = typeof(Resources.Resource), ErrorMessageResourceName = "AcqDateRequired")]
        [Display(Name = "AcqDate", ResourceType = typeof(Resources.Resource))]    
        //[Display(Name = "Acquisition date")]
        public Nullable<System.DateTime> acqdate { get; set; }

        public string GetAcqDate
        {
            get { return acqdate != null ? acqdate.Value.ToString("yyyy") : String.Empty; }
        }
        
        [DisplayFormat(DataFormatString = "{0:dd'/'MM'/'yyyy}", ApplyFormatInEditMode = true)] // MM - заглавные - это месяц
        [Display(Name = "colldate", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Collecting date")]
        public Nullable<System.DateTime> colldate { get; set; }

        [DisplayFormat(DataFormatString = "{0:dd'/'MM'/'yyyy}", ApplyFormatInEditMode = true)]
        [Display(Name = "date_reseed", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Дата пересева")]
        public Nullable<System.DateTime> date_reseed { get; set; }

        [Display(Name = "collcode", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Collecting institute")]
        public string collcode { get; set; }

        [Display(Name = "bredcode", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Breeding institute")]
        public string bredcode { get; set; }

        [Display(Name = "doncty", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Donor country")]
        public Nullable<int> doncty { get; set; }

        [Display(Name = "donor", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Donor institute")]
        public string donor { get; set; }

        [Display(Name = "expedition", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Expedition")]
        public string expedition { get; set; }

        [Display(Name = "oricode", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Country of origin")]
        public Nullable<int> oricode { get; set; }

        [Display(Name = "collsite_eng", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Location of collection site (eng)")]
        public string collsite_eng { get; set; }

        [Display(Name = "collsite_rus", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Location of collection site (rus)")]
        public string collsite_rus { get; set; }

        [Display(Name = "liffom", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Form of life")]
        public string liffom { get; set; }

        [Display(Name = "sampstat", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Biological status of accession")]
        public Nullable<int> sampstat { get; set; }

        [Display(Name = "collsrc", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Collection/acquisition source")]
        public Nullable<int> collsrc { get; set; }

        [Display(Name = "storage", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Type of gerplasm storage")]
        public Nullable<int> storage { get; set; }

        [Display(Name = "Уникальный код ВИР")] //пока не использую
        public Nullable<double> dbkey { get; set; }




        [Display(Name = "nintrod", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Introduction number")]
        public string nintrod { get; set; }

        [Display(Name = "nexped", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Expedition number")]
        public string nexped { get; set; }

        [Display(Name = "nother", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Other identification numbers")]
        public string nother { get; set; }

        [Display(Name = "ndonor", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Donor accession number")]
        public string ndonor { get; set; }

        [Display(Name = "duplsite", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Location of safety duplicates")]
        public string duplsite { get; set; }

        [Display(Name = "pedigree_rus", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Ancestral data (rus)")]
        public string pedigree_rus { get; set; }

        [Display(Name = "pedigree_eng", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Ancestral data (eng)")]
        public string pedigree_eng { get; set; }

        [Display(Name = "latitude", ResourceType = typeof(Resources.Resource))]
        //[RegularExpression("\\d{0-9}", ErrorMessage = "Пожалуйста вводите не более 12 цифр в поле телефона")]
        //[Display(Name = "Latitude")]
        public Nullable<float> latitude { get; set; }

        [Display(Name = "longitude", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Longitude")]
        public Nullable<float> longitude { get; set; }

        public string LatLong_calc
        {
            get { return latitude != null && longitude != null ? latitude.Value.ToString("0.00") + " | " + longitude.Value.ToString("0.00") : String.Empty; }
        }

        [Display(Name = "elevation", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Elevation")]
        public Nullable<int> elevation { get; set; }

        [Display(Name = "remarks", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Remarks")]
        public string REMARKS { get; set; }

        [Display(Name = "dostupen", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Доступность")]
        public bool dostupen { get; set; }

        [Display(Name = "Владелец")]
        public Nullable<int> owner { get; set; }

        [Display(Name = "owner_str", ResourceType = typeof(Resources.Resource))]
        //[Display(Name = "Владелец")]
        public string owner_str { get; set; }

        public virtual botanic botanic { get; set; }
        public virtual collsrc collsrc1 { get; set; }
        public virtual geography geography { get; set; }
        public virtual geography geography1 { get; set; }
        public virtual INSTITUT INSTITUT { get; set; }
        public virtual INSTITUT INSTITUT1 { get; set; }
        public virtual INSTITUT INSTITUT2 { get; set; }
        public virtual KRIS_EXP KRIS_EXP { get; set; }
        public virtual liffom liffom1 { get; set; }
        public virtual sampstat_full sampstat_full { get; set; }
        public virtual storage storage1 { get; set; }
    }
    public class SearchField
    {
        public string code { get; set; } 
        public string name { get; set; }
        public string exp { get; set; } 
    }
}
